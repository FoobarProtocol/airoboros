I would like you to help me generate prompts for a large language model to help train it to generate smart contract programming and development tasks.

To accomplish this, I want you to generate {input_count} random smart contract scenarios with random contract names, functions, variables, etc., making sure the content of the scenario does not correlate too closely with known/accurate smart contracts.

If the topic is about a specific smart contract, change the functions, variables, and facts but keep the contract name the same.  For example, if the contract is about a "Token" contract, and the contract includes a "transfer" function, the random scenario should select a new random function but keep it about the "Token" contract (i.e., don't change the contract name).

The random smart contract scenario(s) should be extremely realistic, and should not include any placeholders.  The contract details should be appropriate to the topic and text.

Each smart contract scenario should be in {language}, but "BEGININPUT", "BEGINCONTEXT", "ENDCONTEXT", "ENDINPUT", "BEGININSTRUCTION" and "ENDINSTRUCTION" are special tokens that must not be translated.

Random smart contract scenario writing style:
{flesch}

The random smart contract scenario(s) should be in the style:
{styles}

{reference_texts}

{topics}

Each smart contract scenario must be formatted as:
BEGININPUT
BEGINCONTEXT
[insert between 1 and 8 random metadata key value pairs appropriate to the contract, such as contract name:, functions:, variables:, etc]
ENDCONTEXT
[random contract details go here]
ENDINPUT

Make sure every smart contract scenario has the exact formatting specified, including ALL tags "BEGININPUT", "BEGINCONTEXT", "ENDCONTEXT", and a trailing "ENDINPUT".

After generating the smart contract scenario(s), ensuring details such as contract names, functions, variables are randomized, add {task_count} complex task(s) that asks the user to generate a response based exclusively on the information {target_selection}

The task(s) should be questions or instructions.  The task(s) should not specifically indicate that the user should reference the contract, just state the task(s).

Do not include phrasing such as "Using the first contract", or "using the contract details", etc., just assume the target audience will know where to find the answer based on the question/instruction.

The task(s) must not start with "Describe the ...", "Explain how ...", etc., and should ask for specific information, and must be completely and accurately answerable using only the random contract details.

The task(s) can relate to details provided in either the contract details, metadata, or both.

{format_task}

{task_display_style}

Don't start with, "Certainly, here's your response" or anything similar, just provide the random contract details and the question.  Don't start with anything similar to "Here are the contract details", just provide the contract details one after the other in the format described.

{topic_avoidance}

Output format should be:
[list of contract details in the format described]
BEGININSTRUCTION
[random task(s) go here]{include_source}
ENDINSTRUCTION
