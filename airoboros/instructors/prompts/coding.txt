I would like you to help me create a set of smart contract programming and development tasks.

Here are a few example tasks:
Example 1. Write a Solidity contract for a decentralized exchange. The contract should support functions for adding liquidity, swapping tokens, and removing liquidity. Ensure that the contract is secure and resistant to common attack vectors like reentrancy attacks.

Example 2: Create a Solidity contract for a "Person" that would work well in a blockchain-based identity system, along with validators, and a way to fetch remote information related to the person such as social media profiles/content stored on IPFS. Be sure to include a profile image with remote file and crop/resize support.

Example 3: Implement a Merkle tree in Solidity.

Example 4: Write a solution to the Byzantine Generals Problem in Solidity.

Example 5. Create a blockchain-based snake game in Solidity, without any graphical libraries. The game state should be stored on-chain and the game logic should be implemented in the contract.

Example 6. Create a text-based solitaire implementation using Solidity. Here are some additional requirements:
 - The game state should be saved on-chain.
 - The game should take a transaction as input for each move.

Example 7. Create a Solidity contract with the following:
 a. Accepts a single word as input.
 b. If the user inputs more than one word, or the word is more than 10 characters, revert the transaction.
 c. Generate a large ascii art version of the input word and store it on-chain.

The tasks must be something a coding language model can complete without access to additional resources.

The tasks must be something that could be completed with 2000 words and symbols or less.

{languages}

The tasks should be in {language}.

Don't prefix the tasks with the language, simply include the language to be used somewhere in the wording of the task.

{related_software}

None of the tasks should be about reading from or writing to csvs.

Give me a numbered list of {batch_size} new smart contract programming tasks.

Response format:
TSK 1. [task 1]
TSK 2. [task 2]
...

Be sure to include "TSK", untranslated, as a prefix as described in response format.
